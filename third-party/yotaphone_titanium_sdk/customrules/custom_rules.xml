<?xml version="1.0" encoding="UTF-8"?>
<project name="custom_rules" default="release-with-system-key">

    <property file="build.properties"/>
    <property file="third-party/yotaphone_titanium_sdk/customrules/formal_build.properties"/>
    
    <target name="release-with-system-key" depends="release">
        <antcall target="clean-system-build"/>
        <antcall target="signer"/>
    </target>
	
	<target name="release-with-yota-key" depends="release">
        <antcall target="clean-system-build"/>
        <antcall target="signer_with_yotakey"/>
    </target>
    
    <target name="install-with-system-key" depends="release-with-system-key">
        <uninstall-helper app.package="${package-name}" /> 
        <antcall target="install-to-emulator"/>
    </target>
	
	<target name="install-with-system-key-and-git-version" depends="-custom-git-version,-custom-manifest-version,release-with-system-key">
        <uninstall-helper app.package="${package-name}" /> 
		<antcall target="-custom-restore-manifest"/>
        <antcall target="install-to-emulator"/>
    </target>
    
	<target name="install-with-system-key-as-system" depends="release-with-system-key">
        <antcall target="install-as-system-app"/>
    </target>
	
	<target name="install-with-system-key-as-system-reboot" depends="release-with-system-key">
        <antcall target="install-as-system-app"/>
		<antcall target="reboot"/>
    </target>
	
	<target name="install-with-yota-key" depends="release-with-yota-key">
        <uninstall-helper app.package="${package-name}" /> 
        <antcall target="install-to-emulator"/>
    </target>
	
	<target name="install-with-yota-key-and-git-version" depends="-custom-git-version,-custom-manifest-version,release-with-yota-key">
        <uninstall-helper app.package="${package-name}" /> 
		<antcall target="-custom-restore-manifest"/>
        <antcall target="install-to-emulator"/>
    </target>
    
	<target name="install-with-yota-key-as-system" depends="release-with-yota-key">
        <antcall target="install-as-system-app"/>
    </target>
	
	<target name="install-with-yota-key-as-system-reboot" depends="release-with-yota-key">
        <antcall target="install-as-system-app"/>
		<antcall target="reboot"/>
    </target>
	
    <target name="clean-system-build">
        <delete dir="${basedir}/${dest_dir}"/>
        <mkdir dir="${basedir}/${dest_dir}"/>
    </target>
    
    <target name="install-to-emulator">
        <!-- redefine property out.final.file -->
        <propertyreset name="out.final.file" value="${dest_dir}/${midletName}.apk"/>
        <antcall target="install"/>
    </target>
    
    <scriptdef name="propertyreset" language="javascript"
        description="Allows to assign @{property} new value">
        <attribute name="name"/>
        <attribute name="value"/>
            project.setProperty(attributes.get("name"), attributes.get("value"));
    </scriptdef>
    
    <target name="signer">
          <echo>singen ${out.packaged.file} with system key...</echo> 
          <java jar="${sign-jar-dir}/signapk.jar" fork="true">
              <arg value="${titanium.key.store}/platform.x509.pem" /> 
              <arg value="${titanium.key.store}/platform.pk8" /> 
              <arg value="${out.packaged.file}" /> 
              <arg value="${out.dir}/${midletName}_signed_with_system_key.apk" /> 
          </java>
		  
	  	  <zipalign-helper in.package="${out.dir}/${midletName}_signed_with_system_key.apk" out.package="${dest_dir}/${midletName}.apk" />
  
		  <!--<move file="${out.dir}/${midletName}_signed_with_system_key.apk" tofile="${dest_dir}/${midletName}.apk" /> -->
    </target>
    
	<target name="signer_with_yotakey">
          <echo>singen ${out.packaged.file} with yotadevices key...</echo> 
          
		  <property name="out.unaligned.yotakey.file" location="${out.dir}/${midletName}-unaligned-release-with-yotakey.apk" />
		  <signapk
                input="${out.packaged.file}"
                output="${out.unaligned.yotakey.file}"
                keystore="${yota.key.store}"
                storepass="${yota.key.store.password}"
                alias="${yota.key.alias}"
                keypass="${yota.key.alias.password}"/>
		  
		  <zipalign-helper in.package="${out.unaligned.yotakey.file}" out.package="${dest_dir}/${midletName}.apk" />
    </target>
    
    <!-- Custom targets -->
    <target name="formal-build" depends="-get-last-revision-git,-custom-manifest-version,release">
        <antcall target="clean-system-build"/>
        <antcall target="signer"/>
        <antcall target="-custom-restore-manifest"/>
        <antcall target="copy-to-formal-build"/>
    </target>
	
	<target name="formal-build-yota-key" depends="-get-last-revision-git,-custom-manifest-version,release">
        <antcall target="clean-system-build"/>
        <antcall target="signer_with_yotakey"/>
        <antcall target="-custom-restore-manifest"/>
        <antcall target="copy-to-formal-build"/>
    </target>
	
    <target name="copy-to-formal-build">
        <copy file="${dest_dir}/${midletName}.apk" tofile="${formal_dir}/${midletName}.apk"></copy>
    </target>
    
    <target name="-custom-git-version">
      <exec executable="sh" outputproperty="versioning.code">
        <arg value="-c" />
        <arg value="git log --pretty=format:'' | wc -l" />
      </exec>
      <echo>git.commits: ${versioning.code}</echo>
    </target>
    
	<target name="-get-last-revision-git">
		<git command="rev-list" property="versioning.code" taskname="versioning">
			<args>
				<arg value="--count" />
				<arg value="HEAD" />
			</args>
		</git>
		<echo level="info" taskname="versioning">${versioning.code}</echo>
    </target>
	
	<macrodef name="git" taskname="@{taskname}">
		<attribute name="command" />
		<attribute name="dir" default="" />
		<attribute name="property" default="" />
		<attribute name="taskname" default="" />
		<attribute name="failonerror" default="on" />
		<element name="args" optional="true" />
		<sequential>
			<exec executable="/usr/bin/git" dir="@{dir}" outputproperty="@{property}" 
				failifexecutionfails="@{failonerror}" failonerror="@{failonerror}">
				<arg value="@{command}" />
				<args/>
			</exec>
		</sequential>
	</macrodef>
		
    <target name="-custom-manifest-version">
       <echo>Creating backup of AndroidManifest.xml</echo>
       <copy file="AndroidManifest.xml" tofile="AndroidManifest.xml.antbak" preservelastmodified="true" />
    
       <replaceregexp
          file="AndroidManifest.xml"
          match='android:versionCode="(\d+)"'
          replace='android:versionCode="${versioning.code}"' />
    
       <replaceregexp
          file="AndroidManifest.xml"
          match='android:versionName="(\d+\.\d+)\.\d+"'
          replace='android:versionName="\1.${versioning.code}"' />
     </target>
    
     <target name="-custom-restore-manifest">
      <echo>Restoring backup of AndroidManifest.xml</echo>
      <move file="AndroidManifest.xml.antbak"
            tofile="AndroidManifest.xml"
            preservelastmodified="true"
            overwrite="true" />
     </target>
    
	    <!-- Target to run app after install -->
    <target name="run">
	    <xpath input="AndroidManifest.xml"
	           expression="/manifest/@package"
	           output="manifest.package" />
	    <xpath input="AndroidManifest.xml"
	           expression="/manifest/application/activity[intent-filter/action/@android:name='android.intent.action.MAIN']/@android:name"
	           output="manifest.main" />
	    <echo level="info">Restart main activity ${manifest.package}/${manifest.main}</echo>
	    <exec executable="${android.platform.tools.dir}/adb">
	        <arg value="shell"/>
	        <arg value="am"/>
	        <arg value="start"/>
	        <arg value="-S"/>
	        <arg value="-a"/>
	        <arg value="android.intent.action.MAIN"/>
	        <arg value="-n"/>
	        <arg value="${manifest.package}/${manifest.main}"/>
	    </exec>
	</target>
	
    <!-- Target to clear DB before install -->
    <target name="clear">
	    <xpath input="AndroidManifest.xml"
	           expression="/manifest/@package"
	           output="manifest.package" />
	    <echo level="info">Clear data for ${manifest.package}</echo>
	    <exec executable="${android.platform.tools.dir}/adb">
	        <arg value="shell"/>
	        <arg value="pm"/>
	        <arg value="clear"/>
	        <arg value="${manifest.package}"/>
	    </exec>
	</target>
	
    <!-- Target to wait debugger -->
    <target name="debugger">
	    <xpath input="AndroidManifest.xml"
	           expression="/manifest/@package"
	           output="manifest.package" />
	    <echo level="info">With attached debugger on ${manifest.package}</echo>
	    <exec executable="${android.platform.tools.dir}/adb">
	        <arg value="shell"/>
	        <arg value="am"/>
	        <arg value="set-debug-app"/>
	        <arg value="-w"/>
	        <arg value="${manifest.package}"/>
	    </exec>
	</target>
	
	<!-- Install app as system-->
	<target name="install-as-system-app">
           <antcall target="wait"/>
           <antcall target="root"/>
		   <antcall target="wait"/>
		   <antcall target="remount"/>
		   <antcall target="wait"/>
           <antcall target="install-to-system"/>
           <antcall target="change-chmod"/>
    </target>
    
    <target name="install-to-system">
        <exec executable="${android.platform.tools.dir}/adb">
            <arg value="push"/>
            <arg value="${dest_dir}/${midletName}.apk"/>
            <arg value="/system/app"/>
        </exec>
    </target>
    
    <target name="change-chmod">
        <exec executable="${android.platform.tools.dir}/adb">
            <arg value="shell"/>
            <arg value="chmod"/>
            <arg value="644"/>
            <arg value="/system/app/${midletName}.apk"/>
        </exec>
    </target>
    
    <target name="remount">
        <exec executable="${android.platform.tools.dir}/adb">
            <arg value="remount"/>
        </exec>
    </target>
    
	<target name="root">
        <exec executable="${android.platform.tools.dir}/adb">
            <arg value="root"/>
        </exec>
    </target>
	
	<target name="wait">
        <exec executable="${android.platform.tools.dir}/adb">
            <arg value="wait-for-device"/>
        </exec>
    </target>
	
    <target name="reboot">
        <exec executable="${android.platform.tools.dir}/adb">
            <arg value="reboot"/>
        </exec>
    </target>

</project>
